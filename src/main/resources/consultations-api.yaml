openapi: 3.0.3
info:
  title: Consultations API
  version: 1.0.0
  description: This is the API for the Consultations service.

servers:
  - url: http://localhost:8080
    description: Local server

paths:
  /consultations/{id}:
    get:
      summary: Get a consultation by ID
      operationId: getConsultationById
      parameters:
        - name: id
          in: path
          required: true
          description: The ID of the consultation to retrieve
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Consultation'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'


  /consultations/{id}/responses:
    post:
      summary: Submit a response to a consultation
      operationId: submitResponse
      parameters:
        - name: id
          in: path
          required: true
          description: The ID of the consultation to respond to
          schema:
            type: integer
            format: int64

      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SurveyResponse'

      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConsultationResponse'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'


components:
  schemas:
    Consultation:
      type: object
      properties:
        id:
          type: integer
          format: int64
        title:
          type: string
        questions:
          type: array
          items:
            $ref: '#/components/schemas/Question'

    Question:
      type: object
      properties:
        id:
          type: integer
          format: int64
        text:
          type: string
        answerType:
          $ref: '#/components/schemas/AnswerType'

    AnswerType:
      type: string
      enum:
        - BOOLEAN
        - INTEGER

    SurveyResponse:
      type: object
      properties:
        answers:
          type: array
          items:
            $ref: '#/components/schemas/Answer'

    Answer:
      oneOf:
        - $ref: '#/components/schemas/BooleanAnswer'
        - $ref: '#/components/schemas/IntegerAnswer'
      properties:
        questionId:
          type: integer
          format: int64
      required:
        - questionId
      discriminator:
        propertyName: type
        mapping:
          BOOLEAN: '#/components/schemas/BooleanAnswer'
          INTEGER: '#/components/schemas/IntegerAnswer'

    BaseAnswer:
      type: object
      required:
        - type
        - questionId
        - value
      properties:
        type:
          type: string
        questionId:
          type: integer
          format: int64

    BooleanAnswer:
      type: object
      allOf:
        - $ref: '#/components/schemas/BaseAnswer'
      properties:
        value:
          type: boolean

    IntegerAnswer:
      type: object
      allOf:
        - $ref: '#/components/schemas/BaseAnswer'
      properties:
        value:
          type: integer
          format: int32

    ResponseSubmittedResponse:
      type: object
      properties:
        message:
          type: string

    ConsultationResponse:
      type: object
      properties:
        status:
          type: string
          enum:
            - FAILED
            - REFERRED


    Error:
      type: object
      properties:
        message:
          type: string